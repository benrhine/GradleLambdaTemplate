# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

frameworkVersion: '3'                                   # Set what version of serverless is being used

service: glt-service                                   # This should match the application name specified in the settings.gradle
#plugins:                                                # Specify any additional plugins for serverless - be aware that these can increase cold start time
#  - serverless-simple-alias
#  # Ref: https://www.serverless.com/plugins/serverless-offline
#  - serverless-offline                                  # Helper plugin that allows for offline testing of lambdas - THIS ONLY SUPPORTS Node.js, Python, Ruby and Go Î» runtimes.

custom:                                                 # Set custom options / variables for serverless
  serverlessPrefix: 'sls'                               # Short name for serverless
  appShortName: glt                                     # Short app name to prefix all policies with the application specific name
  rolePrefix: Glt                                       # Prefix role(s) with application specific name
  repoName: gradle-lambda-template                      # The repository name that this acts upon
  tablePerson: "${self:custom.serverlessPrefix}-${self:custom.appShortName}-person-${self:provider.stage}" # Name of table to create
#  logRetentionInDays: 30 # used to set a global value for all functions
  # Reference: https://sst.dev/chapters/stages-in-serverless-framework.html
  stage: ${opt:stage, self:provider.stage}              # use the --stage CLI option if it exists. If it does not, then use the default stage specified by provider.stage
  envVar:
    WHICH_ENV:
      local:  "This is the local environment"
      dev:    "This is the development environment"
      test:   "This is the test environment"
      rgrs:   "This is the regression environment"
      stage:  "This is the staging environment"
      prod:   "This is the production environment"
    MESSAGE:
      local: "This is the local environment"
      dev:   "This is the development environment"
      test:  "This is the test environment"
      rgrs:  "This is the regression environment"
      stage: "This is the staging environment"
      prod:  "This is the production environment"
    LOG_LEVEL:
      local:  "DEBUG"
      dev:    "DEBUG"
      test:   "INFO"
      rgrs:   "INFO"
      stage:  "INFO"
      prod:   "INFO"
    SLS_CERT_BUCKET:
      local:  sls-regional-domain-deploy
      dev:    sls-regional-domain-deploy
      test:   sls-regional-domain-deploy
      rgrs:   sls-regional-domain-deploy
      stage:  sls-regional-domain-deploy
      prod:   sls-regional-domain-deploy
    SLS_CERT_PATH_NAME:
      local:  certificates
      dev:    certificates
      test:   certificates
      rgrs:   certificates
      stage:  certificates
      prod:   certificates
    SLS_CERT_PASSWORD_SECRET_KEY:
#      local:  ${ssm:/aws/reference/secretsmanager/jks-password}
      local:  test_password
      dev:    test_password
      test:   test_password
      rgrs:   test_password
      stage:  test_password
      prod:   test_password
  # Reference: https://sst.dev/chapters/configure-multiple-aws-profiles.html
  profiles:                                             # These values MUST match an AWS Profile in the `./aws/credentials` file. example [default]
    dev:   default
    test:  testAccount
    rgrs:  rgrsAccount
    stage: stageAccount
    prod:  prodAccount
#  simpleAlias:
#    activeAliasName: 'latest'
#    aliases: [ ]
  ######################################################################################################################
  # WARNING: Since this example creates a DB table it currently can not be deployed to multiple stages without some
  # level of modification. ie the table create would need to be extracted to a separate serverless.yml file.
  ######################################################################################################################

provider:
  name: aws                                             # Selected cloud provider
  runtime: java17                                       # Selected runtime
  stage: ${opt:stage, 'dev'}                            # Uses user specified stage (--stage VALUE) or defaults to dev
  region: ${opt:region, 'us-west-2'}                    # Uses user specified region (--region VALUE) or defaults to `us-west-2`
  #profile: ${self:custom.profiles.${self:custom.stage}} # Uses profile based on selected stage. Meaning including "--aws-profile VALUE" is not required.
  endpointType: REGIONAL
  # THIS VALUE MAY NEED TO CHANGE BASED ON THE APPLICATIONS PURPOSE
  timeout: 20                                           # optional, in seconds, default is 6
  httpApi:                                              # Aws HTTP Api Gateway
    cors: false                                         # Enable / Disable CORS - Ref:https://www.serverless.com/framework/docs/providers/aws/events/http-api#cors-setup
    metrics: true                                       # Enable metrics
    useProviderTags: true                               # Explicitly tells the application to use tags defined under the tags element
    disableDefaultEndpoint: false                       # Require the use of a custom domain. Ie the default aws urls will not be callable
#  apiGateway:                                           # Aws REST Api Gateway
#    metrics: true                                       # Enable metrics
  tracing:                                              # Distributed tracing configuration (ie Aws X-Ray)
    lambda: true                                        # Enables X-Ray for Lambdas
#    apiGateway: true                                    # Enables X-Ray for Api-Gateway - ONLY AVAILABLE FOR REST API GATEWAY; NOT AVAILABLE FOR HTTP GATEWAY
  tags:                                                 # Note: If the API Gateway has any existing tags applied outside of Serverless Framework, they will be removed during deployment.
    project: my-project                                 # Tags a HTTP Lambda
    #tagKey: my-project                                  # Tags a REST Lambda
#  stackTags:                                            # ONLY available to REST Lambda
#    stackTagKey: lambda-gradle-serverless
  logRetentionInDays: 30                                # Set log retention
  logs:                                                 # Additional logging configuration - This will create an additional log file in cloudwatch
    httpApi: true                                       # Enables logs for Aws HTTP Api Gateway - Ref: https://www.serverless.com/framework/docs/providers/aws/events/http-api#access-logs
#    restApi: true                                       # Enables logs for Aws REST Api Gateway - Ref: https://www.serverless.com/framework/docs/providers/aws/events/apigateway#logs
  iam:
    role: !Sub arn:aws:iam::${AWS::AccountId}:role/service-role/${self:custom.serverlessPrefix}-${self:custom.appShortName}-lambda-execution-service-role
  #    role:
#      'Fn::Join':
#        - ':'
#        - - 'arn:aws:iam'
#          - ''
#          - Ref: 'AWS::AccountId'
#          - role/service-role/${self:custom.serverlessPrefix}-${self:custom.appShortName}-lambda-execution-service-role
#    role: arn:aws:iam::530712432331:role/service-role/codebuild-sls-bglt-build-deploy-service-role  # This works
#    role: BgltDeployAdminRole                                 # Documentation claims this work - In testing did not work
#    role:                                                     # Documentation claims this work - In testing did not work
#      Fn::GetAtt:
#        - service-role/codebuild-${self:custom.serverlessPrefix}-${self:custom.appShortName}-build-deploy-service-role
#        - Arn
#    role: !Sub arn:aws:iam::${AWS::AccountId}:role/roleInMyAccount
  # https://dev.to/davidshaek/how-to-save-up-on-aws-s3-buckets-while-deploying-with-serverless-framework-17jm
  deploymentBucket: # Collect all serverless deployment files in a single bucket
    name: ${self:custom.serverlessPrefix}-regional-domain-deploy   # Specify bucket name
    serverSideEncryption: AES256                        # Specify bucket encryption
    maxPreviousDeploymentArtifacts: 10                  # Max number of old builds to keep
  environment:                                          # Set environment variables - these are available to the application at runtime
    WHICH_ENV: ${self:custom.envVar.WHICH_ENV.${self:custom.stage}}
    SLS_CERT_BUCKET: ${self:custom.envVar.SLS_CERT_BUCKET.${self:custom.stage}}
    SLS_CERT_PATH_NAME: ${self:custom.envVar.SLS_CERT_PATH_NAME.${self:custom.stage}}
    SLS_CERT_PASSWORD_SECRET_KEY: ${self:custom.envVar.SLS_CERT_PASSWORD_SECRET_KEY.${self:custom.stage}}
    TABLE_NAME: ${self:custom.tablePerson}
    MESSAGE: ${self:custom.envVar.MESSAGE.${self:custom.stage}}
    POWERTOOLS_SERVICE_NAME: ${self:service}-${self:custom.stage}
    POWERTOOLS_METRICS_NAMESPACE: ${self:service}-${self:custom.stage}-metrics
    POWERTOOLS_LOG_LEVEL: ${self:custom.envVar.LOG_LEVEL.${self:custom.stage}}

package:                                                # Specify the artifact to publish
  artifact: 'build/libs/${self:service}-0.0.1-SNAPSHOT-all.jar'
#  artifact: 'build/libs/${self:service}-${self:provider.stage}-all.jar'

functions:
#  listPersonsREST:
#    handler: com.boeing.boeinggradlelambdatemplate.v1.lambda.aws.handler.PersonHandler::handleGetByParam
#    snapStart: true
#    events:
#      - http:
#          path: /persons-rest
#          method: get
##          private: true   # This makes the api require an apiKey
  listPersonsHTTP:
    handler: com.boeing.boeinggradlelambdatemplate.v1.lambda.aws.handler.GetPersonHandler::handleRequest
    snapStart: true
    events:
      - httpApi:
          path: /${self:custom.stage}/persons-http
          method: get
#          authorizer:   # This attaches a jwt authorizer https://us-west-2.console.aws.amazon.com/apigateway/main/develop/auth/attach
#            name: auth0Authorizer
#    provisionedConcurrency: 5                           # Sets number of instances to be always running (CAN NOT be enabled if you want to use snapStart)
#  getPersonREST:
#    handler: com.boeing.boeinggradlelambdatemplate.v1.lambda.aws.handler.PersonHandler::handleGetByParam
#    snapStart: true
#    events:
#      - http:
#          path: /persons-rest/{id}
#          method: get
##          private: true   # This makes the api require an apiKey
#    provisionedConcurrency: 5                           # Sets number of instances to be always running (CAN NOT be enabled if you want to use snapStart)
#    environment:
#      TABLE_NAME: ${self:custom.tablePerson}
  getPersonHTTP:
    handler: com.boeing.boeinggradlelambdatemplate.v1.lambda.aws.handler.GetPersonHandler::handleRequest
    snapStart: true
    events:
      - httpApi:
          path: /${self:custom.stage}/persons-http/{id}
          method: get
#          authorizer:   # This attaches a jwt authorizer https://us-west-2.console.aws.amazon.com/apigateway/main/develop/auth/attach
#            name: auth0Authorizer
#    provisionedConcurrency: 5                           # Sets number of instances to be always running (CAN NOT be enabled if you want to use snapStart)
    environment:
      TABLE_NAME: ${self:custom.tablePerson}
#  createPersonREST:
#    handler: com.boeing.boeinggradlelambdatemplate.v1.lambda.aws.handler.PersonHandler::handleRequest
#    snapStart: true
#    events:
#      - http:
#          path: /persons-rest
#          method: put
##          private: true   # This makes the api require an apiKey
#    provisionedConcurrency: 5                           # Sets number of instances to be always running (CAN NOT be enabled if you want to use snapStart)
#    environment:
#      TABLE_NAME: ${self:custom.tablePerson}
  createPersonHTTP:
    handler: com.boeing.boeinggradlelambdatemplate.v1.lambda.aws.handler.CreatePersonHandler::handleRequest
    snapStart: true
    events:
      - httpApi:
          path: /${self:custom.stage}/persons-http
          method: put
#          authorizer:   # This attaches a jwt authorizer https://us-west-2.console.aws.amazon.com/apigateway/main/develop/auth/attach
#            name: auth0Authorizer
  #    provisionedConcurrency: 5                           # Sets number of instances to be always running (CAN NOT be enabled if you want to use snapStart)
    environment:
      TABLE_NAME: ${self:custom.tablePerson}
#  deleteProduct:
#    handler: com.serverless.DeleteProductHandler
#    snapStart: true
#    events:
#      - http:
#          path: /products/{id}
#          method: delete
#    provisionedConcurrency: 5                           # Sets number of instances to be always running (CAN NOT be enabled if you want to use snapStart)
